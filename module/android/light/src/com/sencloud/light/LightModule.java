/**
ÏØ * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.sencloud.light;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.provider.Settings;
import android.util.Log;
//import org.appcelerator.titanium.TiBlob;
import android.view.WindowManager;

@Kroll.module(name="Light", id="com.sencloud.light")
public class LightModule extends KrollModule
{

	// Standard Debugging variables
	private static final String TAG = "LightModule";
	
	private static LightModule _instance;
	
	private int brightness;
	private int mOldBrightness;
	private static final int BRIGHTNESS_DIM = 20;
	private static final int BRIGHTNESS_ON = 255;

	private static final int MINIMUM_BACKLIGHT = BRIGHTNESS_DIM + 10;
	private static final int MAXIMUM_BACKLIGHT = BRIGHTNESS_ON;
	
	private Context mContext; 
	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public LightModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(TAG, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}


	public static LightModule getInstance() {
		return _instance;
	}

	/**
	 * 获取屏幕的亮度
	 * 
	 * @param activity
	 * @return
	 */
	public int getScreenBrightness() {
		int nowBrightnessValue = 0;
		try {
			mContext = TiApplication.getAppCurrentActivity();
			final ContentResolver resolver = mContext.getContentResolver();
			nowBrightnessValue = android.provider.Settings.System.getInt(
					resolver, Settings.System.SCREEN_BRIGHTNESS);
		} catch (final Exception e) {
			e.printStackTrace();
		}
		return nowBrightnessValue;
	}
	
	/**
	 * 设置屏幕亮度，这会反映到真实屏幕上
	 * 
	 * @param activity
	 * @param brightness
	 */
	public void setBrightness(final Activity activity, final int brightness) {
		mContext = TiApplication.getAppCurrentActivity();
		final WindowManager.LayoutParams lp = ((Activity) mContext).getWindow().getAttributes();
		lp.screenBrightness = Float.valueOf(brightness) * (1f / 255f);
		activity.getWindow().setAttributes(lp);
	}
	
	/**
	 *调亮当前页面的亮度
	 */
	
	@Kroll.method
	public void  goRise(){
		
		mContext = TiApplication.getAppCurrentActivity();
		
		((Activity) mContext).runOnUiThread(new Runnable()    
	    {    
	        public void run()    
	        {   
	        	brightness = getScreenBrightness();
	    		mOldBrightness = brightness;
	        	if(brightness != BRIGHTNESS_ON){
	    			setBrightness((Activity) mContext, MAXIMUM_BACKLIGHT);
	    		}
	        }    

	    });  
	}
	
	/**
	 * 恢复调节前的亮度
	 */
	    
	@Kroll.method
	public void  goRecover(){
	
		mContext = TiApplication.getAppCurrentActivity();
		((Activity) mContext).runOnUiThread(new Runnable()    
	    {    
	        public void run()    
	        {   
	        	setBrightness((Activity) mContext, mOldBrightness);
	        }    
	    });  
	}

}

